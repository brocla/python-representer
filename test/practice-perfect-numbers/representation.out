## BEGIN NORMALIZED CODE ##
import math


def placeholder_0(placeholder_1):
    for placeholder_2 in range(2, int(math.sqrt(placeholder_1)) + 1):
        if placeholder_1 % placeholder_2 == 0:
            yield placeholder_2
            if placeholder_2 * placeholder_2 != placeholder_1:
                yield (placeholder_1 // placeholder_2)


def placeholder_3(placeholder_1):
    if placeholder_1 <= 0:
        raise ValueError("Classification is only possible for positive integers.")
    placeholder_4 = sum(placeholder_0(placeholder_1)) + (1 if placeholder_1 > 1 else 0)
    if placeholder_4 < placeholder_1:
        return "deficient"
    elif placeholder_4 == placeholder_1:
        return "perfect"
    else:
        return "abundant"

## END NORMALIZED CODE ##

## BEGIN TREE BEFORE ##
Module(
  [
    Import(
      [
        alias(
          'math',
          lineno=1,
          col_offset=7,
          end_lineno=1,
          end_col_offset=11)],
      lineno=1,
      col_offset=0,
      end_lineno=1,
      end_col_offset=11),
    FunctionDef(
      'divisor_generator',
      arguments(
        [],
        [
          arg(
            'number',
            lineno=3,
            col_offset=22,
            end_lineno=3,
            end_col_offset=28)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            'Returns an unordered list of divisors for n (1 < number).\n\n    :param number: int a positive integer\n    :return: list of int divisors\n    ',
            lineno=4,
            col_offset=4,
            end_lineno=8,
            end_col_offset=7),
          lineno=4,
          col_offset=4,
          end_lineno=8,
          end_col_offset=7),
        For(
          Name(
            'index',
            Store(),
            lineno=10,
            col_offset=8,
            end_lineno=10,
            end_col_offset=13),
          Call(
            Name(
              'range',
              Load(),
              lineno=10,
              col_offset=17,
              end_lineno=10,
              end_col_offset=22),
            [
              Constant(
                2,
                lineno=10,
                col_offset=23,
                end_lineno=10,
                end_col_offset=24),
              BinOp(
                Call(
                  Name(
                    'int',
                    Load(),
                    lineno=10,
                    col_offset=26,
                    end_lineno=10,
                    end_col_offset=29),
                  [
                    Call(
                      Attribute(
                        Name(
                          'math',
                          Load(),
                          lineno=10,
                          col_offset=30,
                          end_lineno=10,
                          end_col_offset=34),
                        'sqrt',
                        Load(),
                        lineno=10,
                        col_offset=30,
                        end_lineno=10,
                        end_col_offset=39),
                      [
                        Name(
                          'number',
                          Load(),
                          lineno=10,
                          col_offset=40,
                          end_lineno=10,
                          end_col_offset=46)],
                      [],
                      lineno=10,
                      col_offset=30,
                      end_lineno=10,
                      end_col_offset=47)],
                  [],
                  lineno=10,
                  col_offset=26,
                  end_lineno=10,
                  end_col_offset=48),
                Add(),
                Constant(
                  1,
                  lineno=10,
                  col_offset=51,
                  end_lineno=10,
                  end_col_offset=52),
                lineno=10,
                col_offset=26,
                end_lineno=10,
                end_col_offset=52)],
            [],
            lineno=10,
            col_offset=17,
            end_lineno=10,
            end_col_offset=53),
          [
            If(
              Compare(
                BinOp(
                  Name(
                    'number',
                    Load(),
                    lineno=11,
                    col_offset=11,
                    end_lineno=11,
                    end_col_offset=17),
                  Mod(),
                  Name(
                    'index',
                    Load(),
                    lineno=11,
                    col_offset=20,
                    end_lineno=11,
                    end_col_offset=25),
                  lineno=11,
                  col_offset=11,
                  end_lineno=11,
                  end_col_offset=25),
                [
                  Eq()],
                [
                  Constant(
                    0,
                    lineno=11,
                    col_offset=29,
                    end_lineno=11,
                    end_col_offset=30)],
                lineno=11,
                col_offset=11,
                end_lineno=11,
                end_col_offset=30),
              [
                Expr(
                  Yield(
                    Name(
                      'index',
                      Load(),
                      lineno=12,
                      col_offset=18,
                      end_lineno=12,
                      end_col_offset=23),
                    lineno=12,
                    col_offset=12,
                    end_lineno=12,
                    end_col_offset=23),
                  lineno=12,
                  col_offset=12,
                  end_lineno=12,
                  end_col_offset=23),
                If(
                  Compare(
                    BinOp(
                      Name(
                        'index',
                        Load(),
                        lineno=13,
                        col_offset=15,
                        end_lineno=13,
                        end_col_offset=20),
                      Mult(),
                      Name(
                        'index',
                        Load(),
                        lineno=13,
                        col_offset=23,
                        end_lineno=13,
                        end_col_offset=28),
                      lineno=13,
                      col_offset=15,
                      end_lineno=13,
                      end_col_offset=28),
                    [
                      NotEq()],
                    [
                      Name(
                        'number',
                        Load(),
                        lineno=13,
                        col_offset=32,
                        end_lineno=13,
                        end_col_offset=38)],
                    lineno=13,
                    col_offset=15,
                    end_lineno=13,
                    end_col_offset=38),
                  [
                    Expr(
                      Yield(
                        BinOp(
                          Name(
                            'number',
                            Load(),
                            lineno=14,
                            col_offset=22,
                            end_lineno=14,
                            end_col_offset=28),
                          FloorDiv(),
                          Name(
                            'index',
                            Load(),
                            lineno=14,
                            col_offset=32,
                            end_lineno=14,
                            end_col_offset=37),
                          lineno=14,
                          col_offset=22,
                          end_lineno=14,
                          end_col_offset=37),
                        lineno=14,
                        col_offset=16,
                        end_lineno=14,
                        end_col_offset=37),
                      lineno=14,
                      col_offset=16,
                      end_lineno=14,
                      end_col_offset=37)],
                  [],
                  lineno=13,
                  col_offset=12,
                  end_lineno=14,
                  end_col_offset=37)],
              [],
              lineno=11,
              col_offset=8,
              end_lineno=14,
              end_col_offset=37)],
          [],
          lineno=10,
          col_offset=4,
          end_lineno=14,
          end_col_offset=37)],
      [],
      lineno=3,
      col_offset=0,
      end_lineno=14,
      end_col_offset=37),
    FunctionDef(
      'classify',
      arguments(
        [],
        [
          arg(
            'number',
            lineno=17,
            col_offset=13,
            end_lineno=17,
            end_col_offset=19)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            ' A perfect number equals the sum of its positive divisors.\n\n    :param number: int a positive integer\n    :return: str the classification of the input integer\n    ',
            lineno=18,
            col_offset=4,
            end_lineno=22,
            end_col_offset=7),
          lineno=18,
          col_offset=4,
          end_lineno=22,
          end_col_offset=7),
        If(
          Compare(
            Name(
              'number',
              Load(),
              lineno=24,
              col_offset=7,
              end_lineno=24,
              end_col_offset=13),
            [
              LtE()],
            [
              Constant(
                0,
                lineno=24,
                col_offset=17,
                end_lineno=24,
                end_col_offset=18)],
            lineno=24,
            col_offset=7,
            end_lineno=24,
            end_col_offset=18),
          [
            Raise(
              Call(
                Name(
                  'ValueError',
                  Load(),
                  lineno=25,
                  col_offset=14,
                  end_lineno=25,
                  end_col_offset=24),
                [
                  Constant(
                    'Classification is only possible for positive integers.',
                    lineno=25,
                    col_offset=25,
                    end_lineno=25,
                    end_col_offset=81)],
                [],
                lineno=25,
                col_offset=14,
                end_lineno=25,
                end_col_offset=82),
              lineno=25,
              col_offset=8,
              end_lineno=25,
              end_col_offset=82)],
          [],
          lineno=24,
          col_offset=4,
          end_lineno=25,
          end_col_offset=82),
        Assign(
          [
            Name(
              'aliquot_sum',
              Store(),
              lineno=27,
              col_offset=4,
              end_lineno=27,
              end_col_offset=15)],
          BinOp(
            Call(
              Name(
                'sum',
                Load(),
                lineno=27,
                col_offset=18,
                end_lineno=27,
                end_col_offset=21),
              [
                Call(
                  Name(
                    'divisor_generator',
                    Load(),
                    lineno=27,
                    col_offset=22,
                    end_lineno=27,
                    end_col_offset=39),
                  [
                    Name(
                      'number',
                      Load(),
                      lineno=27,
                      col_offset=40,
                      end_lineno=27,
                      end_col_offset=46)],
                  [],
                  lineno=27,
                  col_offset=22,
                  end_lineno=27,
                  end_col_offset=47)],
              [],
              lineno=27,
              col_offset=18,
              end_lineno=27,
              end_col_offset=48),
            Add(),
            IfExp(
              Compare(
                Name(
                  'number',
                  Load(),
                  lineno=27,
                  col_offset=57,
                  end_lineno=27,
                  end_col_offset=63),
                [
                  Gt()],
                [
                  Constant(
                    1,
                    lineno=27,
                    col_offset=66,
                    end_lineno=27,
                    end_col_offset=67)],
                lineno=27,
                col_offset=57,
                end_lineno=27,
                end_col_offset=67),
              Constant(
                1,
                lineno=27,
                col_offset=52,
                end_lineno=27,
                end_col_offset=53),
              Constant(
                0,
                lineno=27,
                col_offset=73,
                end_lineno=27,
                end_col_offset=74),
              lineno=27,
              col_offset=52,
              end_lineno=27,
              end_col_offset=74),
            lineno=27,
            col_offset=18,
            end_lineno=27,
            end_col_offset=75),
          lineno=27,
          col_offset=4,
          end_lineno=27,
          end_col_offset=75),
        If(
          Compare(
            Name(
              'aliquot_sum',
              Load(),
              lineno=29,
              col_offset=7,
              end_lineno=29,
              end_col_offset=18),
            [
              Lt()],
            [
              Name(
                'number',
                Load(),
                lineno=29,
                col_offset=21,
                end_lineno=29,
                end_col_offset=27)],
            lineno=29,
            col_offset=7,
            end_lineno=29,
            end_col_offset=27),
          [
            Return(
              Constant(
                'deficient',
                lineno=30,
                col_offset=15,
                end_lineno=30,
                end_col_offset=26),
              lineno=30,
              col_offset=8,
              end_lineno=30,
              end_col_offset=26)],
          [
            If(
              Compare(
                Name(
                  'aliquot_sum',
                  Load(),
                  lineno=31,
                  col_offset=9,
                  end_lineno=31,
                  end_col_offset=20),
                [
                  Eq()],
                [
                  Name(
                    'number',
                    Load(),
                    lineno=31,
                    col_offset=24,
                    end_lineno=31,
                    end_col_offset=30)],
                lineno=31,
                col_offset=9,
                end_lineno=31,
                end_col_offset=30),
              [
                Return(
                  Constant(
                    'perfect',
                    lineno=32,
                    col_offset=15,
                    end_lineno=32,
                    end_col_offset=24),
                  lineno=32,
                  col_offset=8,
                  end_lineno=32,
                  end_col_offset=24)],
              [
                Return(
                  Constant(
                    'abundant',
                    lineno=34,
                    col_offset=15,
                    end_lineno=34,
                    end_col_offset=25),
                  lineno=34,
                  col_offset=8,
                  end_lineno=34,
                  end_col_offset=25)],
              lineno=31,
              col_offset=4,
              end_lineno=34,
              end_col_offset=25)],
          lineno=29,
          col_offset=4,
          end_lineno=34,
          end_col_offset=25)],
      [],
      lineno=17,
      col_offset=0,
      end_lineno=34,
      end_col_offset=25)],
  [])
## END TREE BEFORE ##

## BEGIN NORMALIZED TREE ##
Module(
  [
    Import(
      [
        alias(
          'math',
          lineno=1,
          col_offset=7,
          end_lineno=1,
          end_col_offset=11)],
      lineno=1,
      col_offset=0,
      end_lineno=1,
      end_col_offset=11),
    FunctionDef(
      'placeholder_0',
      arguments(
        [],
        [
          arg(
            'placeholder_1',
            lineno=3,
            col_offset=22,
            end_lineno=3,
            end_col_offset=28)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        For(
          Name(
            'placeholder_2',
            Store(),
            lineno=10,
            col_offset=8,
            end_lineno=10,
            end_col_offset=13),
          Call(
            Name(
              'range',
              Load(),
              lineno=10,
              col_offset=17,
              end_lineno=10,
              end_col_offset=22),
            [
              Constant(
                2,
                lineno=10,
                col_offset=23,
                end_lineno=10,
                end_col_offset=24),
              BinOp(
                Call(
                  Name(
                    'int',
                    Load(),
                    lineno=10,
                    col_offset=26,
                    end_lineno=10,
                    end_col_offset=29),
                  [
                    Call(
                      Attribute(
                        Name(
                          'math',
                          Load(),
                          lineno=10,
                          col_offset=30,
                          end_lineno=10,
                          end_col_offset=34),
                        'sqrt',
                        Load(),
                        lineno=10,
                        col_offset=30,
                        end_lineno=10,
                        end_col_offset=39),
                      [
                        Name(
                          'placeholder_1',
                          Load(),
                          lineno=10,
                          col_offset=40,
                          end_lineno=10,
                          end_col_offset=46)],
                      [],
                      lineno=10,
                      col_offset=30,
                      end_lineno=10,
                      end_col_offset=47)],
                  [],
                  lineno=10,
                  col_offset=26,
                  end_lineno=10,
                  end_col_offset=48),
                Add(),
                Constant(
                  1,
                  lineno=10,
                  col_offset=51,
                  end_lineno=10,
                  end_col_offset=52),
                lineno=10,
                col_offset=26,
                end_lineno=10,
                end_col_offset=52)],
            [],
            lineno=10,
            col_offset=17,
            end_lineno=10,
            end_col_offset=53),
          [
            If(
              Compare(
                BinOp(
                  Name(
                    'placeholder_1',
                    Load(),
                    lineno=11,
                    col_offset=11,
                    end_lineno=11,
                    end_col_offset=17),
                  Mod(),
                  Name(
                    'placeholder_2',
                    Load(),
                    lineno=11,
                    col_offset=20,
                    end_lineno=11,
                    end_col_offset=25),
                  lineno=11,
                  col_offset=11,
                  end_lineno=11,
                  end_col_offset=25),
                [
                  Eq()],
                [
                  Constant(
                    0,
                    lineno=11,
                    col_offset=29,
                    end_lineno=11,
                    end_col_offset=30)],
                lineno=11,
                col_offset=11,
                end_lineno=11,
                end_col_offset=30),
              [
                Expr(
                  Yield(
                    Name(
                      'placeholder_2',
                      Load(),
                      lineno=12,
                      col_offset=18,
                      end_lineno=12,
                      end_col_offset=23),
                    lineno=12,
                    col_offset=12,
                    end_lineno=12,
                    end_col_offset=23),
                  lineno=12,
                  col_offset=12,
                  end_lineno=12,
                  end_col_offset=23),
                If(
                  Compare(
                    BinOp(
                      Name(
                        'placeholder_2',
                        Load(),
                        lineno=13,
                        col_offset=15,
                        end_lineno=13,
                        end_col_offset=20),
                      Mult(),
                      Name(
                        'placeholder_2',
                        Load(),
                        lineno=13,
                        col_offset=23,
                        end_lineno=13,
                        end_col_offset=28),
                      lineno=13,
                      col_offset=15,
                      end_lineno=13,
                      end_col_offset=28),
                    [
                      NotEq()],
                    [
                      Name(
                        'placeholder_1',
                        Load(),
                        lineno=13,
                        col_offset=32,
                        end_lineno=13,
                        end_col_offset=38)],
                    lineno=13,
                    col_offset=15,
                    end_lineno=13,
                    end_col_offset=38),
                  [
                    Expr(
                      Yield(
                        BinOp(
                          Name(
                            'placeholder_1',
                            Load(),
                            lineno=14,
                            col_offset=22,
                            end_lineno=14,
                            end_col_offset=28),
                          FloorDiv(),
                          Name(
                            'placeholder_2',
                            Load(),
                            lineno=14,
                            col_offset=32,
                            end_lineno=14,
                            end_col_offset=37),
                          lineno=14,
                          col_offset=22,
                          end_lineno=14,
                          end_col_offset=37),
                        lineno=14,
                        col_offset=16,
                        end_lineno=14,
                        end_col_offset=37),
                      lineno=14,
                      col_offset=16,
                      end_lineno=14,
                      end_col_offset=37)],
                  [],
                  lineno=13,
                  col_offset=12,
                  end_lineno=14,
                  end_col_offset=37)],
              [],
              lineno=11,
              col_offset=8,
              end_lineno=14,
              end_col_offset=37)],
          [],
          lineno=10,
          col_offset=4,
          end_lineno=14,
          end_col_offset=37)],
      [],
      lineno=3,
      col_offset=0,
      end_lineno=14,
      end_col_offset=37),
    FunctionDef(
      'placeholder_3',
      arguments(
        [],
        [
          arg(
            'placeholder_1',
            lineno=17,
            col_offset=13,
            end_lineno=17,
            end_col_offset=19)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        If(
          Compare(
            Name(
              'placeholder_1',
              Load(),
              lineno=24,
              col_offset=7,
              end_lineno=24,
              end_col_offset=13),
            [
              LtE()],
            [
              Constant(
                0,
                lineno=24,
                col_offset=17,
                end_lineno=24,
                end_col_offset=18)],
            lineno=24,
            col_offset=7,
            end_lineno=24,
            end_col_offset=18),
          [
            Raise(
              Call(
                Name(
                  'ValueError',
                  Load(),
                  lineno=25,
                  col_offset=14,
                  end_lineno=25,
                  end_col_offset=24),
                [
                  Constant(
                    'Classification is only possible for positive integers.',
                    lineno=25,
                    col_offset=25,
                    end_lineno=25,
                    end_col_offset=81)],
                [],
                lineno=25,
                col_offset=14,
                end_lineno=25,
                end_col_offset=82),
              lineno=25,
              col_offset=8,
              end_lineno=25,
              end_col_offset=82)],
          [],
          lineno=24,
          col_offset=4,
          end_lineno=25,
          end_col_offset=82),
        Assign(
          [
            Name(
              'placeholder_4',
              Store(),
              lineno=27,
              col_offset=4,
              end_lineno=27,
              end_col_offset=15)],
          BinOp(
            Call(
              Name(
                'sum',
                Load(),
                lineno=27,
                col_offset=18,
                end_lineno=27,
                end_col_offset=21),
              [
                Call(
                  Name(
                    'placeholder_0',
                    Load(),
                    lineno=27,
                    col_offset=22,
                    end_lineno=27,
                    end_col_offset=39),
                  [
                    Name(
                      'placeholder_1',
                      Load(),
                      lineno=27,
                      col_offset=40,
                      end_lineno=27,
                      end_col_offset=46)],
                  [],
                  lineno=27,
                  col_offset=22,
                  end_lineno=27,
                  end_col_offset=47)],
              [],
              lineno=27,
              col_offset=18,
              end_lineno=27,
              end_col_offset=48),
            Add(),
            IfExp(
              Compare(
                Name(
                  'placeholder_1',
                  Load(),
                  lineno=27,
                  col_offset=57,
                  end_lineno=27,
                  end_col_offset=63),
                [
                  Gt()],
                [
                  Constant(
                    1,
                    lineno=27,
                    col_offset=66,
                    end_lineno=27,
                    end_col_offset=67)],
                lineno=27,
                col_offset=57,
                end_lineno=27,
                end_col_offset=67),
              Constant(
                1,
                lineno=27,
                col_offset=52,
                end_lineno=27,
                end_col_offset=53),
              Constant(
                0,
                lineno=27,
                col_offset=73,
                end_lineno=27,
                end_col_offset=74),
              lineno=27,
              col_offset=52,
              end_lineno=27,
              end_col_offset=74),
            lineno=27,
            col_offset=18,
            end_lineno=27,
            end_col_offset=75),
          lineno=27,
          col_offset=4,
          end_lineno=27,
          end_col_offset=75),
        If(
          Compare(
            Name(
              'placeholder_4',
              Load(),
              lineno=29,
              col_offset=7,
              end_lineno=29,
              end_col_offset=18),
            [
              Lt()],
            [
              Name(
                'placeholder_1',
                Load(),
                lineno=29,
                col_offset=21,
                end_lineno=29,
                end_col_offset=27)],
            lineno=29,
            col_offset=7,
            end_lineno=29,
            end_col_offset=27),
          [
            Return(
              Constant(
                'deficient',
                lineno=30,
                col_offset=15,
                end_lineno=30,
                end_col_offset=26),
              lineno=30,
              col_offset=8,
              end_lineno=30,
              end_col_offset=26)],
          [
            If(
              Compare(
                Name(
                  'placeholder_4',
                  Load(),
                  lineno=31,
                  col_offset=9,
                  end_lineno=31,
                  end_col_offset=20),
                [
                  Eq()],
                [
                  Name(
                    'placeholder_1',
                    Load(),
                    lineno=31,
                    col_offset=24,
                    end_lineno=31,
                    end_col_offset=30)],
                lineno=31,
                col_offset=9,
                end_lineno=31,
                end_col_offset=30),
              [
                Return(
                  Constant(
                    'perfect',
                    lineno=32,
                    col_offset=15,
                    end_lineno=32,
                    end_col_offset=24),
                  lineno=32,
                  col_offset=8,
                  end_lineno=32,
                  end_col_offset=24)],
              [
                Return(
                  Constant(
                    'abundant',
                    lineno=34,
                    col_offset=15,
                    end_lineno=34,
                    end_col_offset=25),
                  lineno=34,
                  col_offset=8,
                  end_lineno=34,
                  end_col_offset=25)],
              lineno=31,
              col_offset=4,
              end_lineno=34,
              end_col_offset=25)],
          lineno=29,
          col_offset=4,
          end_lineno=34,
          end_col_offset=25)],
      [],
      lineno=17,
      col_offset=0,
      end_lineno=34,
      end_col_offset=25)],
  [])
## END NORMALIZED TREE ##